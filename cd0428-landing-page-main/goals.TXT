Suggestions to Make Your Project Stand Out!
See the "Suggested" items section in Development Strategy in the classroom.

Add an active state to your navigation items when a section is in the viewport.
Hide fixed navigation bar while not scrolling (it should still be present on page load).
Hint: setTimeout can be used to check when the user is no longer scrolling.
Add a scroll to top button on the page that’s only visible when the user scrolls below the fold of the page.
Update/change the design/content.
Make sections collapsible.

===============================


Landing Page

Interface and Architecture

CRITERIA
MEETS SPECIFICATIONS
Architecture

The project should have a structure like the one shown below. All files shown must be present and the app must successfully render a home page with clear design and functionality added when index.html is loaded in the browser. No errors should display in console.

css
- styles.css    
index.html
js
- app.js
README.md
Usability

All features are usable across modern desktop, tablet, and phone browsers.
A Responsive layout of the landing page should be created to use across all devices.
Make sure that the navigation bar is responsive too across all these devices.
Responsiveness can be verified by inspecting the landing page using the Developer Tools option on Google Chrome Browser.
Styling

Styling should be added for active states.
Set CSS class active state when the element is in the viewport.
The active section in the Navbar should be highlighted.
HTML Structure

There are at least 4 sections that have been added to the page.

Landing Page Behavior

CRITERIA
MEETS SPECIFICATIONS
Navigation

Navigation is built dynamically as an unordered list. Start with empty ul and dynamically build navigation using Append, appendChild, and innerHTML.

Section Active State

It should be clear which section is being viewed while scrolling through the page.

Tip: Detect the element location relative to the viewport using .getBoundingClientRect() built-in function.

Scroll to Anchor

When clicking an item from the navigation menu, the link should scroll to the appropriate section.
You can use the following methods to fulfill this criterion:

Use addEventListener('click',....) to listen to the click event.
Use preventDefault() as if there is a default event occurring we need to stop that.
There are several javascript methods for scrolling, scroll(), scrollBy(), and scrollIntoView() are all acceptable.
A smooth scrolling behavior is expected in the project.
Documentation

CRITERIA
MEETS SPECIFICATIONS
README

The ReadMe file should replace the given texts on the README template with specific information for this project. It doesn’t have to be thorough, but should have some basic information, eg. project description, usage, dependencies, and use correct the markdown syntax.

References: markdown guide and example of README contents

Comments

Comments should be present at the beginning of each procedure and class.

Bonus: Great to have comments before crucial code sections within the procedure.
Refer to Udacity JavaScript Style Guide - Comments for standard best practices.

Code Quality

Code should be formatted with consistent, logical, and easy-to-read formatting.

Tip: Carefully follow the best practices mentioned in the Code formatting section of the guide



















============================================================

What you will build
You will be building a multi-section landing page. Often times, we don’t know how much content will be added to a page through a CMS or an API. To circumvent this problem, we can dynamically add the content to the page. We will be demonstrating this with the navigation menu. Additionally, dynamically building the navigation is a great precursor to understanding the virtual DOM which you will experience when you begin working with JavaScript frameworks.

To improve the user experience, the section actively being viewed should be differentiated in some way. Additionally, when a user clicks on a navigation item, the item should scroll you to the appropriate section rather than giving you the default jump.


------------------------------------

What will I learn?


The landing page presents the first opportunity to fully combine your skills in HTML, CSS, and JavaScript into a large project. Aside from solidifying your skills with these three technologies, you’ll discover how best to combine them in a complex application.

The following are just some of the questions that you’ll experience along the way:

What’s the ideal workflow?
How many files do I need?
Do I modify the HTML first or the CSS?
How many JavaScript functions do I need?
Should my function be this many lines of code?
Is readability or performance more important?

=======================================================


Getting Started
Introduction
This project requires you to build a multi-section landing page, with a dynamically updating navigational menu based on the amount of content that is added to the page.

Project Rubric
Your project will be evaluated by a Udacity code reviewer according to the Landing Page project rubric. Please review for detailed project requirements.

Get the Starter Code
If you'd like to start from scratch without any files, you are encouraged to do so! You learn the most by developing on your own! But, it can be a bit challenging having to start from scratch, so we do provide a starter project (i.e., a "skeleton") to use.

You can download the starter code here by cloning the repository.

The starter code has a static, non-interactive version of the project so you can get a jump-start on development!

JavaScript and the DOM
Great! You now have the starter code. Before moving forward, make sure you are comfortable with the content from the JavaScript and the DOM course. Ask yourself:

What is the Document?
What are events?
How do we listen for them?
How does event delegation help us avoid too many events?
Check Working with Browser Events in JavaScript and the DOM for a refresher if needed
How can we access elements with the following two methods? What are the differences between them?
querySelector()
querySelectorAll()
How do you use getElementbyId() to select a DOM element by its id?
We can also access elements with getElementsByClassName(). What does this method return, and how do you use it?
How do you use the className property? What does it return, and why would it be useful?
What are the different methods for classList?
Hint: the add(), remove(), and toggle() methods look particularly useful...
Every element has an innerHTML property that represents the markup of the element's content. How can you leverage this property to get and set content?
